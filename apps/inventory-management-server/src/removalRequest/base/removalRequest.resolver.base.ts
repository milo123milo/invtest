/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RemovalRequest } from "./RemovalRequest";
import { RemovalRequestCountArgs } from "./RemovalRequestCountArgs";
import { RemovalRequestFindManyArgs } from "./RemovalRequestFindManyArgs";
import { RemovalRequestFindUniqueArgs } from "./RemovalRequestFindUniqueArgs";
import { CreateRemovalRequestArgs } from "./CreateRemovalRequestArgs";
import { UpdateRemovalRequestArgs } from "./UpdateRemovalRequestArgs";
import { DeleteRemovalRequestArgs } from "./DeleteRemovalRequestArgs";
import { RemovalRequestService } from "../removalRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RemovalRequest)
export class RemovalRequestResolverBase {
  constructor(
    protected readonly service: RemovalRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RemovalRequest",
    action: "read",
    possession: "any",
  })
  async _removalRequestsMeta(
    @graphql.Args() args: RemovalRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RemovalRequest])
  @nestAccessControl.UseRoles({
    resource: "RemovalRequest",
    action: "read",
    possession: "any",
  })
  async removalRequests(
    @graphql.Args() args: RemovalRequestFindManyArgs
  ): Promise<RemovalRequest[]> {
    return this.service.removalRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RemovalRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RemovalRequest",
    action: "read",
    possession: "own",
  })
  async removalRequest(
    @graphql.Args() args: RemovalRequestFindUniqueArgs
  ): Promise<RemovalRequest | null> {
    const result = await this.service.removalRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RemovalRequest)
  @nestAccessControl.UseRoles({
    resource: "RemovalRequest",
    action: "create",
    possession: "any",
  })
  async createRemovalRequest(
    @graphql.Args() args: CreateRemovalRequestArgs
  ): Promise<RemovalRequest> {
    return await this.service.createRemovalRequest({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RemovalRequest)
  @nestAccessControl.UseRoles({
    resource: "RemovalRequest",
    action: "update",
    possession: "any",
  })
  async updateRemovalRequest(
    @graphql.Args() args: UpdateRemovalRequestArgs
  ): Promise<RemovalRequest | null> {
    try {
      return await this.service.updateRemovalRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RemovalRequest)
  @nestAccessControl.UseRoles({
    resource: "RemovalRequest",
    action: "delete",
    possession: "any",
  })
  async deleteRemovalRequest(
    @graphql.Args() args: DeleteRemovalRequestArgs
  ): Promise<RemovalRequest | null> {
    try {
      return await this.service.deleteRemovalRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RemovalRequest)
  async ApproveRemovalRequest(
    @graphql.Args()
    args: CreateRemovalRequestArgs
  ): Promise<RemovalRequest> {
    return this.service.ApproveRemovalRequest(args);
  }

  @graphql.Query(() => String)
  async RequestRemovalApproval(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.RequestRemovalApproval(args);
  }
}
