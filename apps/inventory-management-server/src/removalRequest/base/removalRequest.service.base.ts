/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RemovalRequest as PrismaRemovalRequest } from "@prisma/client";
import { CreateRemovalRequestArgs } from "./CreateRemovalRequestArgs";
import { RemovalRequest } from "./RemovalRequest";

export class RemovalRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RemovalRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.removalRequest.count(args);
  }

  async removalRequests<T extends Prisma.RemovalRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RemovalRequestFindManyArgs>
  ): Promise<PrismaRemovalRequest[]> {
    return this.prisma.removalRequest.findMany<Prisma.RemovalRequestFindManyArgs>(
      args
    );
  }
  async removalRequest<T extends Prisma.RemovalRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RemovalRequestFindUniqueArgs>
  ): Promise<PrismaRemovalRequest | null> {
    return this.prisma.removalRequest.findUnique(args);
  }
  async createRemovalRequest<T extends Prisma.RemovalRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RemovalRequestCreateArgs>
  ): Promise<PrismaRemovalRequest> {
    return this.prisma.removalRequest.create<T>(args);
  }
  async updateRemovalRequest<T extends Prisma.RemovalRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RemovalRequestUpdateArgs>
  ): Promise<PrismaRemovalRequest> {
    return this.prisma.removalRequest.update<T>(args);
  }
  async deleteRemovalRequest<T extends Prisma.RemovalRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RemovalRequestDeleteArgs>
  ): Promise<PrismaRemovalRequest> {
    return this.prisma.removalRequest.delete(args);
  }
  async ApproveRemovalRequest(
    args: CreateRemovalRequestArgs
  ): Promise<RemovalRequest> {
    throw new Error("Not implemented");
  }
  async RequestRemovalApproval(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
