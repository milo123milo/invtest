/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RemovalRequestService } from "../removalRequest.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RemovalRequestCreateInput } from "./RemovalRequestCreateInput";
import { RemovalRequest } from "./RemovalRequest";
import { RemovalRequestFindManyArgs } from "./RemovalRequestFindManyArgs";
import { RemovalRequestWhereUniqueInput } from "./RemovalRequestWhereUniqueInput";
import { RemovalRequestUpdateInput } from "./RemovalRequestUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RemovalRequestControllerBase {
  constructor(
    protected readonly service: RemovalRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RemovalRequest })
  @nestAccessControl.UseRoles({
    resource: "RemovalRequest",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRemovalRequest(
    @common.Body() data: RemovalRequestCreateInput
  ): Promise<RemovalRequest> {
    return await this.service.createRemovalRequest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        item: true,
        requestedBy: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [RemovalRequest] })
  @ApiNestedQuery(RemovalRequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RemovalRequest",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async removalRequests(
    @common.Req() request: Request
  ): Promise<RemovalRequest[]> {
    const args = plainToClass(RemovalRequestFindManyArgs, request.query);
    return this.service.removalRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        item: true,
        requestedBy: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RemovalRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RemovalRequest",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async removalRequest(
    @common.Param() params: RemovalRequestWhereUniqueInput
  ): Promise<RemovalRequest | null> {
    const result = await this.service.removalRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        item: true,
        requestedBy: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RemovalRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RemovalRequest",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRemovalRequest(
    @common.Param() params: RemovalRequestWhereUniqueInput,
    @common.Body() data: RemovalRequestUpdateInput
  ): Promise<RemovalRequest | null> {
    try {
      return await this.service.updateRemovalRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          item: true,
          requestedBy: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RemovalRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RemovalRequest",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRemovalRequest(
    @common.Param() params: RemovalRequestWhereUniqueInput
  ): Promise<RemovalRequest | null> {
    try {
      return await this.service.deleteRemovalRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          item: true,
          requestedBy: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/removal-request/approve")
  @swagger.ApiOkResponse({
    type: RemovalRequest,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ApproveRemovalRequest(
    @common.Body()
    body: string
  ): Promise<RemovalRequest> {
    return this.service.ApproveRemovalRequest(body);
  }

  @common.Get("/:id/request-removal-approval")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async RequestRemovalApproval(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.RequestRemovalApproval(body);
  }
}
