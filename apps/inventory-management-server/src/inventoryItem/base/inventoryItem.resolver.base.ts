/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { InventoryItem } from "./InventoryItem";
import { InventoryItemCountArgs } from "./InventoryItemCountArgs";
import { InventoryItemFindManyArgs } from "./InventoryItemFindManyArgs";
import { InventoryItemFindUniqueArgs } from "./InventoryItemFindUniqueArgs";
import { CreateInventoryItemArgs } from "./CreateInventoryItemArgs";
import { UpdateInventoryItemArgs } from "./UpdateInventoryItemArgs";
import { DeleteInventoryItemArgs } from "./DeleteInventoryItemArgs";
import { InventoryItemCreateInput } from "./InventoryItemCreateInput";
import { DeleteRemovalRequestArgs } from "../../removalRequest/base/DeleteRemovalRequestArgs";
import { InventoryItemService } from "../inventoryItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => InventoryItem)
export class InventoryItemResolverBase {
  constructor(
    protected readonly service: InventoryItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InventoryItem",
    action: "read",
    possession: "any",
  })
  async _inventoryItemsMeta(
    @graphql.Args() args: InventoryItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InventoryItem])
  @nestAccessControl.UseRoles({
    resource: "InventoryItem",
    action: "read",
    possession: "any",
  })
  async inventoryItems(
    @graphql.Args() args: InventoryItemFindManyArgs
  ): Promise<InventoryItem[]> {
    return this.service.inventoryItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InventoryItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InventoryItem",
    action: "read",
    possession: "own",
  })
  async inventoryItem(
    @graphql.Args() args: InventoryItemFindUniqueArgs
  ): Promise<InventoryItem | null> {
    const result = await this.service.inventoryItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InventoryItem)
  @nestAccessControl.UseRoles({
    resource: "InventoryItem",
    action: "create",
    possession: "any",
  })
  async createInventoryItem(
    @graphql.Args() args: CreateInventoryItemArgs
  ): Promise<InventoryItem> {
    return await this.service.createInventoryItem({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InventoryItem)
  @nestAccessControl.UseRoles({
    resource: "InventoryItem",
    action: "update",
    possession: "any",
  })
  async updateInventoryItem(
    @graphql.Args() args: UpdateInventoryItemArgs
  ): Promise<InventoryItem | null> {
    try {
      return await this.service.updateInventoryItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InventoryItem)
  @nestAccessControl.UseRoles({
    resource: "InventoryItem",
    action: "delete",
    possession: "any",
  })
  async deleteInventoryItem(
    @graphql.Args() args: DeleteInventoryItemArgs
  ): Promise<InventoryItem | null> {
    try {
      return await this.service.deleteInventoryItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async AddInventoryItem(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.AddInventoryItem(args);
  }

  @graphql.Mutation(() => InventoryItem)
  async CreateInventoryItem(
    @graphql.Args()
    args: InventoryItemCreateInput
  ): Promise<InventoryItem> {
    return this.service.CreateInventoryItem(args);
  }

  @graphql.Mutation(() => InventoryItem)
  async DeleteInventoryItem(
    @graphql.Args()
    args: DeleteRemovalRequestArgs
  ): Promise<InventoryItem> {
    return this.service.DeleteInventoryItem(args);
  }

  @graphql.Query(() => [InventoryItem])
  async GetInventoryStatistics(
    @graphql.Args()
    args: InventoryItemCountArgs
  ): Promise<InventoryItem[]> {
    return this.service.GetInventoryStatistics(args);
  }

  @graphql.Query(() => String)
  async GetInventoryStatistics(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetInventoryStatistics(args);
  }

  @graphql.Query(() => String)
  async GetInventoryStats(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetInventoryStats(args);
  }

  @graphql.Query(() => String)
  async RemoveInventoryItem(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.RemoveInventoryItem(args);
  }
}
