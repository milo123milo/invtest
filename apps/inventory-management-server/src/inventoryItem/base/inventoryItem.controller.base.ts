/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { InventoryItemService } from "../inventoryItem.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { InventoryItemCreateInput } from "./InventoryItemCreateInput";
import { InventoryItem } from "./InventoryItem";
import { InventoryItemFindManyArgs } from "./InventoryItemFindManyArgs";
import { InventoryItemWhereUniqueInput } from "./InventoryItemWhereUniqueInput";
import { InventoryItemUpdateInput } from "./InventoryItemUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class InventoryItemControllerBase {
  constructor(
    protected readonly service: InventoryItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InventoryItem })
  @nestAccessControl.UseRoles({
    resource: "InventoryItem",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createInventoryItem(
    @common.Body() data: InventoryItemCreateInput
  ): Promise<InventoryItem> {
    return await this.service.createInventoryItem({
      data: data,
      select: {
        create: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [InventoryItem] })
  @ApiNestedQuery(InventoryItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "InventoryItem",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async inventoryItems(
    @common.Req() request: Request
  ): Promise<InventoryItem[]> {
    const args = plainToClass(InventoryItemFindManyArgs, request.query);
    return this.service.inventoryItems({
      ...args,
      select: {
        create: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InventoryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InventoryItem",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async inventoryItem(
    @common.Param() params: InventoryItemWhereUniqueInput
  ): Promise<InventoryItem | null> {
    const result = await this.service.inventoryItem({
      where: params,
      select: {
        create: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        quantity: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InventoryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InventoryItem",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateInventoryItem(
    @common.Param() params: InventoryItemWhereUniqueInput,
    @common.Body() data: InventoryItemUpdateInput
  ): Promise<InventoryItem | null> {
    try {
      return await this.service.updateInventoryItem({
        where: params,
        data: data,
        select: {
          create: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InventoryItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "InventoryItem",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteInventoryItem(
    @common.Param() params: InventoryItemWhereUniqueInput
  ): Promise<InventoryItem | null> {
    try {
      return await this.service.deleteInventoryItem({
        where: params,
        select: {
          create: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/add-inventory-item")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async AddInventoryItem(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.AddInventoryItem(body);
  }

  @common.Post("/inventory-item/create")
  @swagger.ApiOkResponse({
    type: InventoryItem,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateInventoryItem(
    @common.Body()
    body: string
  ): Promise<InventoryItem> {
    return this.service.CreateInventoryItem(body);
  }

  @common.Delete("/inventory-item/delete")
  @swagger.ApiOkResponse({
    type: InventoryItem,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DeleteInventoryItem(
    @common.Body()
    body: string
  ): Promise<InventoryItem> {
    return this.service.DeleteInventoryItem(body);
  }

  @common.Get("/inventory/statistics")
  @swagger.ApiOkResponse({
    type: InventoryItem,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetInventoryStatistics(
    @common.Body()
    body: string
  ): Promise<InventoryItem[]> {
    return this.service.GetInventoryStatistics(body);
  }

  @common.Get("/:id/get-inventory-statistics")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetInventoryStatistics(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetInventoryStatistics(body);
  }

  @common.Get("/:id/get-inventory-stats")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetInventoryStats(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetInventoryStats(body);
  }

  @common.Get("/:id/remove-inventory-item")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async RemoveInventoryItem(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.RemoveInventoryItem(body);
  }
}
